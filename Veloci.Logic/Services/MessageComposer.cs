using System.Globalization;
using System.Text;
using Veloci.Data.Domain;
using Veloci.Logic.Bot;

namespace Veloci.Logic.Services;

public class MessageComposer
{
    public string TimeUpdate(IEnumerable<TrackTimeDelta> deltas)
    {
        var messages = deltas.Select(TimeUpdate);
        return string.Join($"{Environment.NewLine}", messages);
    }

    public string StartCompetition(Track track)
    {
        return $"üìÖ –í—ñ—Ç–∞—î–º–æ –Ω–∞ —â–æ–¥–µ–Ω–Ω–æ–º—É FPV –æ–Ω–ª–∞–π–Ω-—Ç—É—Ä–Ω—ñ—Ä—ñ!{Environment.NewLine}{Environment.NewLine}" +
               $"–¢—Ä–µ–∫ –¥–Ω—è: *{track.FullName}*{Environment.NewLine}{Environment.NewLine}" +
               $"Leaderboard: *https://www.velocidrone.com/leaderboard/{track.Map.MapId}/{track.TrackId}/All*";
    }

    public BotPoll Poll(string trackName)
    {
        var question = $"–û—Ü—ñ–Ω—ñ—Ç—å —Ç—Ä–µ–∫ {trackName}{Environment.NewLine}{Environment.NewLine}" +
               $"–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ —Ç—Ä–µ–∫–∏!";

        var options = new List<BotPollOption>
        {
            new (3, "–û–¥–∏–Ω —ñ–∑ –∫—Ä–∞—â–∏—Ö"),
            new (1, "–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è"),
            new (0, "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π"),
            new (-1, "–ù–µ –¥—É–∂–µ"),
            new (-3, "–õ–∞–π–Ω–æ")
        };

        return new BotPoll
        {
            Question = question,
            Options = options
        };
    }

    public string BadTrackRating()
    {
        return $"üòî –ë–∞—á—É —Ç—Ä–µ–∫ –Ω–µ —Å–ø–æ–¥–æ–±–∞–≤—Å—è. –ë—ñ–ª—å—à–µ –π–æ–≥–æ –Ω–µ –±—É–¥–µ";
    }

    public string TempLeaderboard(IEnumerable<CompetitionResults> results)
    {
        var rows = results.Select(TempLeaderboardRow);
        return $"üßê –ü—Ä–æ–º—ñ–∂–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:{Environment.NewLine}{Environment.NewLine}" +
               $"{string.Join($"{Environment.NewLine}", rows)}";
    }

    public string Leaderboard(IEnumerable<CompetitionResults> results, string trackName)
    {
        var rows = results.Select(LeaderboardRow);
        return $"üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–ù–Ø{Environment.NewLine}" +
               $"–¢—Ä–µ–∫: *{trackName}*{Environment.NewLine}{Environment.NewLine}" +
               $"{string.Join($"{Environment.NewLine}{Environment.NewLine}", rows)}";
    }

    public string TempSeasonResults(IEnumerable<SeasonResult> results)
    {
        var rows = results.Select(TempSeasonResultsRow);
        return $"üóì –ü—Ä–æ–º—ñ–∂–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º—ñ—Å—è—Ü—è{Environment.NewLine}{Environment.NewLine}" +
               $"{string.Join($"{Environment.NewLine}{Environment.NewLine}", rows)}";
    }

    public string SeasonResults(IEnumerable<SeasonResult> results)
    {
        var rows = results.Select(SeasonResultsRow);
        return $"üèÅ –§—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º—ñ—Å—è—Ü—è{Environment.NewLine}{Environment.NewLine}" +
               $"{string.Join($"{Environment.NewLine}{Environment.NewLine}", rows)}";
    }

    public string MedalCount(IEnumerable<SeasonResult> results)
    {
        var rows = results.Select(MedalCountRow);
        return $"*–ú–µ–¥–∞–ª—ñ –∑–∞ –º—ñ—Å—è—Ü—å*{Environment.NewLine}{Environment.NewLine}" +
               $"{string.Join($"{Environment.NewLine}{Environment.NewLine}", rows)}";
    }

    #region Private

    private string TimeUpdate(TrackTimeDelta delta)
    {
        var timeChangePart = delta.TimeChange.HasValue ? $" ({MsToSec(delta.TimeChange.Value)}s)" : string.Empty;
        var rankOldPart = delta.RankOld.HasValue ? $" (#{delta.RankOld})" : string.Empty;

        return $"‚è± *{delta.PlayerName}* - {MsToSec(delta.TrackTime)}s{timeChangePart} / #{delta.Rank}{rankOldPart}";
    }

    private string TempLeaderboardRow(CompetitionResults time)
    {
        return $"{time.LocalRank} - *{time.PlayerName}* ({MsToSec(time.TrackTime)}s)";
    }

    private string LeaderboardRow(CompetitionResults time)
    {
        var icon = time.LocalRank switch
        {
            1 => "ü•á",
            2 => "ü•à",
            3 => "ü•â",
            _ => $"#{time.LocalRank}"
        };

        return $"{icon} - *{time.PlayerName}* ({MsToSec(time.TrackTime)}s) / –ë–∞–ª—ñ–≤: *{time.Points}*";
    }

    private string TempSeasonResultsRow(SeasonResult result)
    {
        return $"{result.Rank} - *{result.PlayerName}* - {result.Points} –±–∞–ª—ñ–≤";
    }

    private string SeasonResultsRow(SeasonResult result)
    {
        var icon = result.Rank switch
        {
            1 => "ü•á",
            2 => "ü•à",
            3 => "ü•â",
            _ => $"#{result.Rank}"
        };

        return $"{icon} - *{result.PlayerName}* - {result.Points} –±–∞–ª—ñ–≤";
    }

    private string? MedalCountRow(SeasonResult result)
    {
        if (result is { GoldenCount: 0, SilverCount: 0, BronzeCount: 0 })
            return null;

        var medals = $"{MedalsRow("ü•á", result.GoldenCount)}{MedalsRow("ü•à", result.SilverCount)}{MedalsRow("ü•â", result.BronzeCount)}";
        return $"*{result.PlayerName}*:{Environment.NewLine}{medals}";
    }

    private string MedalsRow(string medalIcon, int count)
    {
        var result = new StringBuilder();

        for (var i = 0; i < count; i++)
        {
            result.Append(medalIcon);
        }

        return result.ToString();
    }

    private static string MsToSec(int ms) => (ms / 1000.0).ToString(CultureInfo.InvariantCulture);

    #endregion
}
